;;; stumpwmrc --- Tumashu's stumpwm configure file

;; Author: Feng Shu <tumashu@gmail.com>, Fabrice Niessen
;; Keywords: stumpwm, common lisp
;; Homepage: https://github.com/tumashu/stumpwm-config
;; Git-Url: git@github.com:tumashu/stumpwm-config.git
;; Version: 0.01

;;; Stumpwm Tips:
;;
;; 1.  在登陆管理器中显示stumpwm选项： 编辑 /usr/share/xsessions/stumpwm.desktop 文件：
;;
;;          [Desktop Entry]
;;          Encoding=UTF-8
;;          Name=stumpwm
;;          Comment=This session logs you into StumpWM (a minimalistic window manager)
;;          Exec=/path/to/stumpwm
;;          Type=Application
;;
;; 2.  设置默认桌面管理器为stumpwm:
;;     1. 如果使用gdm,lightdm等，添加下面代码到文件 ~/.xsession，
;;     2. 如果使用startx命令登陆桌面，则添加下面代码到文件 ~/.xinitrc
;;
;;           # lxpanel &
;;           # bmpanel2 &
;;           exec /your/path/stumpwm
;;
;; 3.  安装字体： xfont-unifont
;;     这个字体是等宽字体，虽然中英文不能完全对齐，但显示效果很好，
;;     类似winxp。
;;
;; 4.  安装taskbar或者dock
;;     1. 使用stumpwm自带的mode-line，配置灵活，但不能使用鼠标切换窗口。
;;     2. 将lxpanel设置为自动隐藏，配合stumpwm自带的mode-line使用，非常方便。
;;     3. bmpanel2(好长时间没有更新了)
;;        1. bmpanel2 should set panel window type as dock.
;;        2. bmpanel2 should launch before stumpwm
;;        3. You need use function resize-head to cut a area for bmpanel2
;;           for example: (resize-head 0 0  25 1366 740)
;;
;; 5.  安装其他程序
;;     1. xfce4-power-manager(xfce电源管理软件)
;;     2. xscreensaver(屏幕保护程序)
;;     3. volti(一个小巧的音量调节器)
;;     4. xdotool(linux下面的按键精灵，我用这个软件自动拷贝文本)
;;     5. xsel(命令行程序，用来管理剪切板的内容)
;; 5.  设置debian menu
;;     1. cp ./bin/menu-method/stumpwm /etc/menu-method/
;;     2. edit /etc/menu-method/stumpwn as appropriate BEFORE using
;;     3. sudo update-menus
;;     4. setf debian-menu-file to rootprefix's value
;;        (for example: /usr/share/common-lisp/source/stumpwm/contrib/stumpwm.menu)
;; 6.  美化Java程序的字体：
;;     在/etc/environment文件中添加一行：
;;
;;        _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true"
;;

;;; Code:
(in-package :stumpwm)
;; (run-shell-command "rm .xsession-errors")
;; I link stumpwmrc-file to ~/.stumpwmrc
(setq *stumpwmrc-file* "~/project/stumpwm-config/stumpwmrc")
(set-contrib-dir "~/project/stumpwm-contrib/")
(setq *swank-loader-file* "~/project/emacs-packages/slime/swank-loader.lisp")
(setq *debian-menu-file* "/var/lib/stumpwm/stumpwm.menu")
(setq *stumpwm-dumpfile-dir* "~/.stumpwm-dumpfile.d")
(setq *emacs-daemon-name* "default")
(setq *stumpwm-temporary-directory* "/tmp/stumpwm")
(setq *shell-program* (stumpwm::getenv "SHELL"))
(setq *ignore-wm-inc-hints* t)

;; load contrib modules
(mapcar #'load-module 
	'("amixer"
	  "cpu"
	  "mem"
	  "battery-portable"
	  "net"
	  "wifi"
	  "disk"
	  "app-menu"
	  "stumptray"
	  ;;"ttf-fonts"
	  ))

;; Add Groups
(run-commands "gnewbg Pools" "gnewbg-float Float")

;; Frame preference setting
(define-frame-preference "Pools"
    (1 nil t :create nil  :class nil :instance nil :title "goagent-gtk.py" :role nil))

;; load Swank so we can connect with SLIME
(load *swank-loader-file*)
(swank-loader:init)
(defvar *swank-p* nil)

;; define swank command to start swank server on port 4005
(defcommand swank () ()
  "Starts a swank server on port 4005 and notifies the user."
  (setf stumpwm:*top-level-error-action* :break)
  (if *swank-p*
      (message "Swank server already running.")
      (progn
	(swank:create-server :port 4005
			     :style swank:*communication-style*
			     :dont-close t)
	(setf *swank-p* t)
	(message "Starting swank on port 4005."))))

(defcommand slime () ()
  (swank)
  (emacsclient-eval
   `(progn
      (require 'slime)
      (slime-connect "127.0.0.1" "4005"))))

(defun my-run-or-raise (cmd props &optional (all-groups *run-or-raise-all-groups*)
				    (all-screens *run-or-raise-all-screens*))
  (let* ((group (current-group))
	 (frames (when (eq (type-of group) 'tile-group)
		   (group-frames group))))
    (if (> (length frames) 1)
	(run-or-pull cmd props all-groups all-screens)
	(run-or-raise cmd props all-groups all-screens))))

(defcommand suspend-computer () ()
  (run-shell-command
   (concat  "dbus-send --print-reply --system  "
	    "--dest=\"org.freedesktop.UPower\"  "
	    "/org/freedesktop/UPower  "
	    "org.freedesktop.UPower.Suspend")))

(defcommand hibernate-computer () ()
  (run-shell-command
   (concat "dbus-send --print-reply --system  "
	   "--dest=\"org.freedesktop.UPower\"  "
	   "/org/freedesktop/UPower  "
	   "org.freedesktop.UPower.Hibernate")))

(defcommand restart-computer () ()
  (run-shell-command
   (concat "dbus-send --print-reply --system "
	   "--dest=\"org.freedesktop.ConsoleKit\" "
	   "/org/freedesktop/ConsoleKit/Manager "
	   "org.freedesktop.ConsoleKit.Manager.Restart")))

(defcommand shutdown-commputer () ()
  (run-shell-command
   (concat "dbus-send --print-reply --system  "
	   "--dest=\"org.freedesktop.ConsoleKit\"  "
	   "/org/freedesktop/ConsoleKit/Manager "
	   "org.freedesktop.ConsoleKit.Manager.Stop")))

(defcommand firefox () ()
  "Start Firefox or switch to it, if it is already running."
  (my-run-or-raise "iceweasel" '(:class "Iceweasel")))

(defcommand file-manager () ()
  "Start nautilus"
  (my-run-or-raise "nautilus --no-desktop" '(:class "Nautilus")))

(defcommand crossover () ()
  "Start crossover"
  (my-run-or-raise "/opt/cxoffice/bin/crossover" '(:class "Crossover")))

(defcommand launch-crossover-app (app bottle) ()
  (my-run-or-raise
   (format nil "/opt/cxoffice/bin/wine --bottle ~a --cx-app '~a'" bottle app)
   `(:instance ,app)))

(defcommand foxit () ()
  (launch-crossover-app "Foxit Reader.exe" "Foxit_Reader_6"))

(defcommand cajviewer () ()
  (launch-crossover-app "CAJVieweru.exe" "cajviewer"))

(defcommand qq () ()
  (launch-crossover-app "TM.exe" "腾讯_TM_2013"))

(defcommand word () ()
  (launch-crossover-app "WINWORD.EXE" "office2003"))

(defcommand excel () ()
  (launch-crossover-app "EXCEL.EXE" "office2003"))

(defcommand ppt () ()
  (launch-crossover-app "POWERPNT.EXE" "office2003"))

(defcommand winxp () ()
  "Start winxp with virtualbox"
  (my-run-or-raise
   "VBoxManage startvm winxp &"
   '(:class "VirtualBox")))

(defcommand jabref () ()
  "Start jabref"
  (my-run-or-raise
   "java -jar ~/bin/JabRef-2.10.jar"
   '(:class "net-sf-jabref-JabRefMain")))

(defcommand emacs-daemon-kill-soft () ()
  (emacsclient-eval
   '(progn
     (when (not (eq window-system 'x))
       (message "Initializing x windows system.")
       (x-initialize-window-system)
       (when (not x-display-name) (setq x-display-name (getenv "DISPLAY")))
       (select-frame (make-frame-on-display x-display-name '((window-system . x)))))
     (let ((last-nonmenu-event nil)(window-system "x"))(save-buffers-kill-emacs)))
   t))

(add-hook *quit-hook* #'emacs-daemon-kill-soft)

(defcommand emacs-daemon-kill-hard () ()
  (run-shell-command
   (format nil "for i in `ps ax | grep emacs | grep =~A |cut -d ' ' -f 1`; do kill -9 $i; done"
	   *emacs-daemon-name*))
  (message (format nil "emacs daemon which name is (~A) has been killed" *emacs-daemon-name*)))

(defun escape-instance-name (str)
  (let (buf)
    (map nil #'(lambda (ch)
		 (if (or (char= ch #\()
			 (char= ch #\))
			 (char= ch #\")
			 (char= ch #\ )
			 (char= ch #\Newline))
		     (push #\_ buf)
		     (push ch buf)))
	 str)
    (coerce (reverse buf) 'string)))

(defun emacs-daemon-run-p ()
  (string-equal
   (remove #\Newline
	   (run-shell-command
	    (concat
	     "emacsclient "
	     "--socket-name=" *emacs-daemon-name*
	     " --eval 't'") t)) "t"))

(defun generate-elisp-expression-string (expression)
  (cl-ppcre:regex-replace-all
   "stumpwm::"
   (write-to-string expression :case :downcase) ""))

(defcommand bare-emacs-run (expression) ()
  (let ((expression-string
	 (generate-elisp-expression-string expression)))
    (run-shell-command (concat "emacs -Q  --eval '" expression-string "'"))))

(defcommand emacs-daemon-start () ()
  (if (not (emacs-daemon-run-p))
      (run-shell-command
       (concat
	"x-terminal-emulator -T emacs-daemon-start -e emacs "
	(if *emacs-daemon-name* (concat "--daemon=" *emacs-daemon-name*)
	    "--daemon")))
      (message (format nil "emacs-daemon which name is \"~a\" is running ..." *emacs-daemon-name*))))

(defun random-string (length)
  "Return a random string with LENGTH characters."
  (let ((alphabet (concat
		   "abcdefghijklmnopqrstuvwxyz"
		   "0123456789"
		   "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
	(string (make-string length)))
    (map-into string (lambda (char)
		       (declare (ignore char))
		       (aref alphabet (random (length alphabet))))
	      string)))

(defun emacsclient-eval (&optional expression create-frame frame-name file)
  "Eval an emacs lisp expression which emacsclient"
  (let* ((expression-string
	  (generate-elisp-expression-string expression))
	 (name (or frame-name
		   (escape-instance-name expression-string)))
	 (elisp-file
	  (make-pathname
	   :directory (pathname-directory (pathname-as-directory  *stumpwm-temporary-directory*))
	   :name (concat "emacsclient-load-file-" (random-string 10))
	   :type "el"))
	 (emacsclient-command
	  (format nil
		  (concat "emacsclient ~@[--socket-name=~A ~]"
			  "~:[ ~;-c~] ~@[-F '((name . \"~A\"))' ~]"
			  "~@[--eval '(load \"~A\")' ~] ~@[~A~];")
		  *emacs-daemon-name*
		  create-frame
		  name
		  elisp-file
		  file)))
    ;; write emacs lisp sexp to a file, all symbol names
    ;; will be converted to downcase when save.
    (with-open-file
	(stream (ensure-directories-exist elisp-file)
		:direction :output
		:if-exists :supersede)
      (with-standard-io-syntax
	(format stream "~A" expression-string)))
    
    ;; start emacs daemon
    (if (not (emacs-daemon-run-p))
	(emacs-daemon-start)
	(my-run-or-raise emacsclient-command `(:instance ,name)))))

(defcommand emacs () ()
  (emacsclient-eval '(recentf-open-files) t "emacs"))

(defcommand emacspeak () ()
  (run-shell-command "emacs --eval '(load-emacspeak)'"))

(defcommand org-agenda () ()
  (emacsclient-eval '(progn (org-agenda nil "l") (delete-other-windows)) t))

(defcommand org-contacts (search)
    ((:string "Search Contacts: "))
  (check-type search string)
  (substitute #\+ #\Space search)
  (emacsclient-eval `(progn (org-contacts ,search) (delete-other-windows)) t))

(defcommand gnus () ()
  (emacsclient-eval '(gnus) t))

(defcommand emms () ()
  (emacsclient-eval '(eh-emms) t))

(defcommand emms-toggle () ()
  (emacsclient-eval '(if emms-player-playing-p (emms-pause) (emms-random))))

(defcommand emms-previous () ()
  (emacsclient-eval '(emms-previous)))

(defcommand emms-random () ()
  (emacsclient-eval '(emms-random)))

(defcommand emms-next () ()
  (emacsclient-eval '(emms-next)))

(defcommand edit-stumpwmrc () ()
  (emacsclient-eval
   `(find-file ,*stumpwmrc-file*)
   t "edit-stumpwmrc"))

(defcommand org-capture-notes () ()
  (emacsclient-eval '(progn (kill-new "") (eh-org-capture nil "n"))))

(defcommand org-capture-simple () ()
  (emacsclient-eval '(progn (kill-new "") (eh-org-capture nil "s"))))

(defcommand org-capture-todo () ()
  (emacsclient-eval '(progn (kill-new "") (eh-org-capture nil "t"))))

(defcommand org-capture-account () ()
  (emacsclient-eval '(progn (kill-new "") (eh-org-capture nil "a"))))

(defcommand org-capture-journal () ()
  (emacsclient-eval '(progn (kill-new "") (eh-org-capture nil "j"))))

(defcommand org-capture-schedule () ()
  (emacsclient-eval '(progn (kill-new "") (eh-org-capture nil "s"))))

(defcommand org-capture-contacts () ()
  (emacsclient-eval '(progn (kill-new "") (eh-org-capture nil "c"))))

(defcommand pidgin () ()
  (run-shell-command "pkill pidgin; pidgin"))

(defcommand mplayer () ()
  (my-run-or-raise "smplayer" '(:class "Smplayer")))

(defcommand top () ()
  (my-run-or-raise "x-terminal-emulator -t htop -e htop" '(:title "htop")))

(defcommand x-terminal-emulator () ()
  (my-run-or-raise "x-terminal-emulator -t default-terminal"
		   '(:title "default-terminal")))

(defcommand launch-new-terminal () ()
  (run-shell-command "x-terminal-emulator"))

(defcommand power-manager () ()
  (run-shell-command "xfce4-power-manager-settings"))

(defcommand goagent () ()
  (my-run-or-raise "python ~/project/goagent/local/goagent-gtk.py"
		   '(:title "goagent-gtk.py")))

(defcommand lock-screen () ()
  (run-shell-command "exec xscreensaver-command -lock"))

(defcommand reinit () ()
  "docstring"
  (run-commands "reload" "loadrc"))

(defcommand gmove-to-pools () ()
  (run-commands "gmove Pools")
  (message "Move the window to GROUP: Pools"))

(defun load-debian-menu-file ()
  (with-open-file (file *debian-menu-file*)
    ;; Hack around the "autogenerated file" comment
    (when (char= #\# (peek-char nil file)) (read-line file))
    (let* ((*read-eval* nil)
	   (list (list (read file))))
      (dotimes (i 1) (setf list (mapcan #'cdr list)))
      list)))

(defcommand show-debian-menu () ()
  "Show the application menu"
  (let ((stack (list (load-debian-menu-file)))
	(menu-split-line
	 (list (cons (make-string 60 :initial-element #\-) nil))))
    (loop
       (let ((choice
	      (cdr (select-from-menu (current-screen)
				     (append menu-split-line
					     (first stack)
					     menu-split-line
					     (list (cons "* 返回上一级菜单" :up))
					     menu-split-line)))))
	 (cond
	   ((not choice) (return))
	   ((eq choice :up) (pop stack) (unless stack (return)))
	   ((stringp choice) (run-shell-command choice) (return))
	   (t (push choice stack)))))))

(defparameter *start-menu*
  '(("---------------------------------------------------")
    ("ZD"     "终端" "x-terminal-emulator")
    (""       "EMACS"  "emacs")
    (""       "org-agenda" "org-agenda")
    ("WJGL"   "文件管理" "file-manager")
    ("SW"     "上网" "firefox")
    ("chrome" "谷歌浏览器"  "chromium")
    ("DZYJ"   "邮件" "gnus")
    ("pidgin" "聊天" "pidgin")
    ("YY"     "音乐" "emms")
    ("DYSP"   "视频" "mplayer")
    ("PDF"    "PDF查看器" "pdfreader")
    (""       "Evince"  "/usr/bin/evince")
    ("---------------------------------------------------")
    ("WNZZ"   "韦诺之战"  "/usr/games/wesnoth-1.10-nolog")
    ("----------------------------------------------------")
    (""       "GNOME大眼睛"  "/usr/bin/eog")
    (""       "图片" "/usr/bin/shotwell")
    ("Dia"    "流程图" "/usr/bin/dia-normal")
    ("PS"     "The GIMP" "/usr/bin/gimp")
    ("---------------------------------------------------")
    ("Word"   "LibreOffice Writer"  "/usr/bin/libreoffice --writer")
    ("Excel"  "LibreOffice Calc"  "/usr/bin/libreoffice --calc")
    ("PPT"    "LibreOffice Impress"  "/usr/bin/libreoffice --impress")
    ("TNFB"   "头脑风暴"  "/usr/bin/freemind")
    ("---------------------------------------------------")
    (""       "记事本"  "/usr/bin/leafpad")
    (""       "Nano"  "x-terminal-emulator  -T \"Nano\" -e sh -c \"/bin/nano\"")
    (""       "获取WN_CLASS" "show-window-properties")
    (""       "WinXP"       "VirtualBox")
    ("BJPZ"   "编辑配置"  "edit-stumpwmrc")
    ("---------------------------------------------------")
    ("XTJK"   "系统监控" "top")
    ("ZX"     "注销"  "quit")
    ("SP"     "锁屏"  "lock-screen")
    ("GQ"     "挂起"  "suspend-computer")
    ("XM"     "休眠"  "hibernate-computer")
    ("CQ"     "重启 "  "restart-computer")
    ("GJ"     "关机"  "shutdown-commputer")
    ("---------------------------------------------------")))

(defcommand show-start-menu () ()
  "show-start-menu"
  (labels ((pick (options)
	     (let ((selection (stumpwm::select-from-menu
			       (current-screen) options "")))
	       (cond
		 ((null selection)
		  (throw 'stumpwm::error "Abort."))
		 ((stringp (second selection))
		  (second selection))
		 (t
		  (pick (cdr selection)))))))
    (let ((choice (pick
		   (mapcar #'(lambda (x)
			       (list
				(if (car (cdr x))
				    (format nil "~10A | ~30A" (nth 0 x) (concat (nth 1 x) "(" (nth 2 x) ")"))
				    (make-string 60 :initial-element #\-))
				(nth 2 x)))
			   *start-menu*))))
      ;; If a function can be found, which name is "choice", run this function,
      ;; otherwise regard "choice" as shell command.
      (if (find choice (all-commands) :test #'equal)
	  (run-commands choice)
	  (run-shell-command choice)))))

(defun shift-windows-forward (frames win)
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
			     (frame-window frame))
      (when win
	(pull-window win frame)))))

(defcommand rotate-windows () ()
  "swap 2 windows"
  (let* ((frames (group-frames (current-group)))
	 (win (frame-window (car (last frames)))))
    (shift-windows-forward frames win)))

(defcommand toggle-split () ()
  "toggle frame split"
  (if (eq (type-of (current-group)) 'float-group)
      (message "Works only in tile group ...")
      (let* ((group (current-group))
	     (group-name (group-name group))
	     (frames (group-frames group))
	     (split-dumpfile
	      (make-pathname
	       :directory (pathname-directory
			   (pathname-as-directory *stumpwm-dumpfile-dir*))
	       :name (concat group-name "-" "simple-split")
	       :type "dumpfile")))
	(if (< (length frames) 3)
	    (if (> (length frames) 1)
		(progn
		  (dump-group-to-file split-dumpfile)
		  (only))
		(progn
		  (only)
		  (hsplit)
		  (when (probe-file split-dumpfile)
		    (restore-from-file split-dumpfile))))
	    (message "Works only with 2 frames ... ")))))

(defcommand toggle-complex-split () ()
  "toggle between complex split and none split"
  (if (eq (type-of (current-group)) 'float-group)
      (message "Works only in tile group ...")
      (let* ((group (current-group))
	     (group-name (group-name group))
	     (frames (group-frames group))
	     (complex-split-dumpfile
	      (make-pathname
	       :directory (pathname-directory (pathname-as-directory *stumpwm-dumpfile-dir*))
	       :name (concat group-name "-" "complex-split")
	       :type "dumpfile")))
	(if (> (length frames) 2)
	    (progn
	      (dump-group-to-file complex-split-dumpfile)
	      (only))
	    (restore-from-file complex-split-dumpfile)))))

(defcommand group-move () ()
  (let* ((group-format "MOVE TO:     [%n] %t                ")
	 (current-window (current-window))
	 (group
	  (second (select-from-menu
		   (current-screen)
		   (mapcar (lambda (g)
			     (list (format-expand *group-formatters* group-format g) g))
			   (screen-groups (current-screen)))))))
    (when (and group current-window)
      (move-window-to-group current-window group)
      (message "Move successful ...."))))

(defcommand (frame-pull-hidden-next tile-group) (frame-number) ((:frame t))
  (let* ((group (current-group))
	 (frame (tile-group-current-frame group)))
    (focus-frame group frame-number)
    (pull-hidden-next)
    (fselect frame)))

(defcommand (frame-pull-hidden-previous tile-group) (frame-number) ((:frame t))
  (let* ((group (current-group))
	 (frame (tile-group-current-frame group)))
    (focus-frame group frame-number)
    (pull-hidden-previous)
    (fselect frame)))

(defcommand (resize-master-frame tile-group) (width height) ((:number "+ Width: ")
							     (:number "+ Height: "))
  (let* ((group (current-group))
	 (cur-frame (tile-group-current-frame group))
	 (frames (group-frames group))
	 (frame (tile-group-current-frame group)))
    (cond
      ((eq (length frames) 2)
       (progn
	 (run-commands "fselect 1")
	 (resize width height)
	 (fselect frame)))
      ((eq (length frames) 1)
       (toggle-split))
      (t (message "Works only with 2 frames")))))

;; keybindings for split frame
(define-key *root-map* (kbd "C-0") "only")
(define-key *root-map* (kbd "C-1") "hsplit")
(define-key *root-map* (kbd "C-2") "vsplit")
(define-key *top-map* (kbd "F12")  "toggle-split")

;; push the window in the adjacent frame
(define-key *root-map* (kbd "C-Up") "move-window up")
(define-key *root-map* (kbd "C-Left") "move-window left")
(define-key *root-map* (kbd "C-Down") "move-window down")
(define-key *root-map* (kbd "C-Right") "move-window right")
(define-key *root-map* (kbd "Delete") "repack-window-numbers")
(define-key *root-map* (kbd "I") "show-window-properties")
(define-key *root-map* (kbd "~") "rotate-windows")
(define-key *root-map* (kbd "|") "toggle-split")

;; keybinding for Fn + F1...F12
(define-key *top-map* (kbd "F1")  "frame-pull-hidden-next 1")
(define-key *top-map* (kbd "F2")  "frame-pull-hidden-next 2")
(define-key *top-map* (kbd "F3")  "resize-master-frame -100 -100")
(define-key *top-map* (kbd "F4")  "resize-master-frame 100 100")

(define-key *top-map* (kbd "XF86Mail")   "gnus")
(define-key *top-map* (kbd "XF86MyComputer") "file-manager")
(define-key *top-map* (kbd "XF86AudioNext")  "emms-next")
(define-key *top-map* (kbd "XF86AudioPrev")  "emms-previous")
(define-key *top-map* (kbd "XF86AudioPlay")  "emms-toggle")

;; Menu
(define-key *root-map* (kbd "g") "grouplist")
(define-key *root-map* (kbd "w") "windowlist")
(define-key *root-map* (kbd "G") '*groups-map*)
(define-key *root-map* (kbd "z") "group-move")
(define-key *root-map* (kbd "q") "gmove-to-pools")
(define-key *root-map* (kbd "m") "show-debian-menu")
(define-key *root-map* (kbd ".") "show-start-menu")

;; Applications launched frequentily
(define-key *root-map* (kbd "v") "file-manager")
(define-key *root-map* (kbd "RET") "x-terminal-emulator")
(define-key *root-map* (kbd "a") "org-agenda")
(define-key *root-map* (kbd "Delete") "exec gksudo halt")
(define-key *root-map* (kbd "L") "lock-screen")
(define-key *root-map* (kbd "&") "exec x-terminal-emulator -e aptitude")
(define-key *root-map* (kbd "x") "exec dmenu_run -i -b -fn '10x20' -p \"shell cmd:\"")
(define-key *root-map* (kbd "c") "launch-new-terminal")
(define-key *root-map* (kbd "C-c") "edit-stumpwmrc")

(setf *applications-map*
      (let ((m (stumpwm:make-sparse-keymap)))
	(stumpwm:define-key m (stumpwm:kbd "g") "goagent")
	(stumpwm:define-key m (stumpwm:kbd "f") "firefox")
	(stumpwm:define-key m (stumpwm:kbd "q") "qq")
	(stumpwm:define-key m (stumpwm:kbd "j") "jabref")
	(stumpwm:define-key m (stumpwm:kbd "c") "cajviewer")
	(stumpwm:define-key m (stumpwm:kbd "p") "pdfreader")
	(stumpwm:define-key m (stumpwm:kbd "w") "winxp")
	m ; NOTE: this is important
	))

(setf *emacs-map*
      (let ((m (stumpwm:make-sparse-keymap)))
	(stumpwm:define-key m (stumpwm:kbd "e") "emacs")
	(stumpwm:define-key m (stumpwm:kbd "c") "org-contacts")
	(stumpwm:define-key m (stumpwm:kbd "g") "gnus")
	(stumpwm:define-key m (stumpwm:kbd "a") "org-agenda")
	(stumpwm:define-key m (stumpwm:kbd "m") "emms")
	(stumpwm:define-key m (stumpwm:kbd "k") "emacs-daemon-kill-soft")
	(stumpwm:define-key m (stumpwm:kbd "K") "emacs-daemon-kill-hard")
	m ; NOTE: this is important
	))

(setf *org-capture-map*
      (let ((m (stumpwm:make-sparse-keymap)))
	(stumpwm:define-key m (stumpwm:kbd "d") "org-capture-notes")
	(stumpwm:define-key m (stumpwm:kbd "e") "org-capture-simple")
	(stumpwm:define-key m (stumpwm:kbd "c") "org-capture-contacts")
	(stumpwm:define-key m (stumpwm:kbd "a") "org-capture-account")
	(stumpwm:define-key m (stumpwm:kbd "j") "org-capture-journal")
	(stumpwm:define-key m (stumpwm:kbd "t") "org-capture-todo")
	(stumpwm:define-key m (stumpwm:kbd "s") "org-capture-schedule")
	m ; NOTE: this is important
	))

(setf *help-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "m") "man")
        (define-key m (kbd "i") "info")
        (define-key m (kbd "v") "describe-variable")
        (define-key m (kbd "f") "describe-function")
        (define-key m (kbd "k") "describe-key")
        (define-key m (kbd "w") "where-is")
        m))

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "f") '*applications-map*)
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "e") '*emacs-map*)
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "d") '*org-capture-map*)

;; Find a font of your choice in `xfontsel' and put it here.
(set-font "*-unifont-medium-*-normal-*-16-*-*-*-*-*-*-*")

;; how to format the window list
(setf *window-format* "^B%m%n:^b %40t  ")

;; width in pixels given to the borders of windows with maxsize or ratio hints
(setf *maxsize-border-width* 1)

;; width in pixels given to the borders of transient or pop-up windows
(setf *transient-border-width* 1)

;; width in pixels given to the borders of regular windows
(setf *normal-border-width* 1)

;; width in pixels given to the borders of float windows
(setf *float-window-border* 1)
(setf *float-window-title-height* 10)

;; set the border color for focused windows
(set-focus-color "orange")  ; `white' by default
(set-unfocus-color "skyblue")

;; input focus is transferred to the window you click on
(setf *mouse-focus-policy* :click)

;; Set the input box and message box color
(set-fg-color "white")
(set-bg-color "black")
(set-border-color "blue3")
(set-msg-border-width 2)

;; Set the message box pad
(setf *message-window-padding* 100)

;;Set the message and input box to the bottom right. This way it overlaps with mode-line.
(setf *message-window-gravity* :bottom-right)
(setf *input-window-gravity* :bottom-right)

;; make frames 1-indexed
(setf *frame-number-map* "1234567890")

;; modeline foreground color
(setf *mode-line-foreground-color* "palegreen3")

;; modeline border color
(setf *mode-line-border-color* "palegreen3")

(setf *chinese-day-names*
      '("一" "二" "三" "四" "五" "六" "日"))

(defun current-date ()
  "Returns the date formatted as `2009-11-16 一 11:34:03'."
  (multiple-value-bind
	(second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil "~d-~2,'0d-~2,'0d ~a ^B~2,'0d:~2,'0d:~2,'0d^b"
            year month date (nth day-of-week *chinese-day-names*)
            hour minute second)))

(setf *group-format* "%s   [%n] %t                        ")
(setf *screen-mode-line-format*
      (list
       ;; date
       "^6*" '(:eval (current-date)) ; defined above
       " | %D | %c(%f,%t) | %M | %l"
       '(:eval (run-shell-command "echo" t))
       "^2*" "[^B%n^b] %W"
       ))

;; how many seconds elapse between each update of the modeline
(setf *mode-line-timeout* 1) ; must be set *before* turning on the modeline

;; number of padding pixels between the modeline text and the top/bottom of
;; the modeline
(setf *mode-line-pad-y* 0)

;; modeline background color
;; (setf *mode-line-background-color* "black")

;; turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))
;; A head is a physical monitor. A screen is a section of video memory
;; that heads are mapped on to. When using xinerama you generally have
;; 1 screen and many heads. When not using xinerama each screen is a
;; physical monitor so you have many screens with only one head on them.

;; turn on debugging (look at `.xsession-errors')
;; get rid of debug by setting level to 0
(setf stumpwm::*debug-level* 10)

;; display the key sequence in progress
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (eq *top-map* *resize-map*)
    (let ((*message-window-gravity* :bottom-right))
      (message "Key sequence: ~a" (print-key-seq (reverse key-seq))))
    (when (stringp cmd)
      (sleep 0.1))))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))

(replace-hook *key-press-hook* 'key-press-hook)

(run-commands "stumptray")
(run-shell-command "xset b off")
(run-shell-command "xfce4-power-manager")
(run-shell-command "xscreensaver -no-splash")
(run-shell-command "nm-applet")
(run-shell-command "volti")
(run-shell-command "xmodmap -e 'keycode 135 = Super_R'")
(run-commands "emacs-daemon-kill-hard" "emacs-daemon-start")

;; Local Variables:
;; coding: utf-8
;; mode: lisp
;; End:

;;; stumpwmrc ends here
