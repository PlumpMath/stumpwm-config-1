;;; stumpwmrc --- Tumashu's stumpwm configure file

;; Author: Feng Shu <tumashu@gmail.com>, Fabrice Niessen
;; Keywords: stumpwm, common lisp
;; Homepage: https://github.com/tumashu/stumpwm-config
;; Git-Url: git@github.com:tumashu/stumpwm-config.git
;; Version: 0.01

;;; Stumpwm Tips:
;;
;; 1.  在登陆管理器中显示stumpwm选项： 编辑 /usr/share/xsessions/stumpwm.desktop 文件：
;;
;;          [Desktop Entry]
;;          Encoding=UTF-8
;;          Name=stumpwm
;;          Comment=This session logs you into StumpWM (a minimalistic window manager)
;;          Exec=/path/to/stumpwm
;;          Type=Application
;;
;; 2.  设置默认桌面管理器为stumpwm:
;;     1. 如果使用gdm,lightdm等，添加下面代码到文件 ~/.xsession，
;;     2. 如果使用startx命令登陆桌面，则添加下面代码到文件 ~/.xinitrc
;;
;;           # lxpanel &
;;           # bmpanel2 &
;;           exec /your/path/stumpwm
;;
;; 3.  安装字体： xfont-unifont
;;     这个字体是等宽字体，虽然中英文不能完全对齐，但显示效果很好，
;;     类似winxp。
;;
;; 4.  安装其他程序
;;     1. bmpanel2(这个任务栏软件和stumpwm配合比较好，值得一试)
;;        1. bmpanel2 should set panel window type as dock.
;;        2. bmpanel2 should launch before stumpwm
;;        3. You need use function resize-head to cut a area for bmpanel2
;;           for example: (resize-head 0 0  25 1366 740)
;;     2. xfce4-power-manager(xfce电源管理软件)
;;     3. xscreensaver(屏幕保护程序)
;;     4. volti(一个小巧的音量调节器)
;;     5. xdotool(linux下面的按键精灵，我用这个软件自动拷贝文本)
;;     6. xsel(命令行程序，用来管理剪切板的内容)
;; 5.  设置debian menu
;;     1. cp ./bin/menu-method/stumpwm /etc/menu-method/
;;     2. edit /etc/menu-method/stumpwn as appropriate BEFORE using
;;     3. sudo update-menus
;;     4. setf debian-menu-file to rootprefix's value
;;        (for example: /usr/share/common-lisp/source/stumpwm/contrib/stumpwm.menu)
;; 6.  美化Java程序的字体：
;;     在/etc/environment文件中添加一行：
;;
;;        _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true"
;;

;;; Code:
(in-package :stumpwm)
(run-shell-command "rm .xsession-errors")
;; I link stumpwmrc-file to ~/.stumpwmrc
(setf stumpwmrc-file "~/project/stumpwm-config/stumpwmrc")
(set-contrib-dir "/home/feng/project/stumpwm/contrib/")
(setf my-swank-loader "~/project/slime/swank-loader.lisp")
(setf debian-menu-file "/usr/share/common-lisp/source/stumpwm/contrib/stumpwm.menu")
;; shell program used by `run-shell-command'
(setq *shell-program* (stumpwm::getenv "SHELL"))

;; load contrib modules
(mapcar #'load-module 
	'("amixer"
	  "cpu"
	  "mem"
	  "battery-portable"
	  "net"
	  "wifi"
	  "disk"
	  "app-menu"
	  "stumptray"
	  ))

;; load Swank so we can connect with SLIME
(load my-swank-loader)
(swank-loader:init)
(defvar *swank-p* nil)

;; define swank command to start swank server on port 4005
(defcommand swank () ()
  "Starts a swank server on port 4005 and notifies the user."
  (setf stumpwm:*top-level-error-action* :break)
  (if *swank-p*
      (message "Swank server already running.")
    (progn
      (swank:create-server :port 4005
                           :style swank:*communication-style*
                           :dont-close t)
      (setf *swank-p* t)
      (message "Starting swank on port 4005."))))
(swank)

;; Add Groups
(run-commands "gnewbg EMACS"  "gnewbg Others" "gnewbg-float Float")

;; Frame preference setting
(define-frame-preference "Default"
  (1 t t :create nil  :class "Iceweasel" :instance nil :title nil :role nil))

(define-frame-preference "Others"
  (1 nil t :create nil  :class nil :instance nil :title "goagent-gtk.py" :role nil)
  (1 t t :create nil  :class nil :instance "edit-stumpwmrc" :title nil :role nil))

(define-frame-preference "EMACS"
  (1 t t :create nil  :class nil :instance "org-agenda" :title nil :role nil)
  (1 t t :create nil  :class nil :instance "gnus" :title nil :role nil)
  (1 t t :create nil  :class nil :instance "emms" :title nil :role nil))

;; Stumpwm commands
(defcommand suspend-computer () ()
  (run-shell-command
   (concat  "dbus-send --print-reply --system  "
	    "--dest=\"org.freedesktop.UPower\"  "
	    "/org/freedesktop/UPower  "
	    "org.freedesktop.UPower.Suspend")))

(defcommand hibernate-computer () ()
  (run-shell-command
   (concat "dbus-send --print-reply --system  "
	   "--dest=\"org.freedesktop.UPower\"  "
	   "/org/freedesktop/UPower  "
	   "org.freedesktop.UPower.Hibernate")))

(defcommand restart-computer () ()
  (run-shell-command
   (concat "dbus-send --print-reply --system "
	   "--dest=\"org.freedesktop.ConsoleKit\" "
	   "/org/freedesktop/ConsoleKit/Manager "
	   "org.freedesktop.ConsoleKit.Manager.Restart")))

(defcommand shutdown-commputer () ()
  (run-shell-command
   (concat "dbus-send --print-reply --system  "
	   "--dest=\"org.freedesktop.ConsoleKit\"  "
	   "/org/freedesktop/ConsoleKit/Manager "
	   "org.freedesktop.ConsoleKit.Manager.Stop")))

(defcommand firefox () ()
  "Start Firefox or switch to it, if it is already running."
  (run-or-raise "iceweasel" '(:class "Iceweasel")))

(defcommand file-manager () ()
  "Start nautilus"
  (run-or-raise "nautilus --no-desktop" '(:class "Nautilus")))

(defcommand winxp () ()
  "Start winxp with virtualbox"
  (run-or-raise
   "VBoxManage startvm winxp &"
   '(:class "VirtualBox")))

(defcommand jabref () ()
  "Start jabref"
  (run-or-raise
   "java -jar ~/bin/JabRef-2.9.2.jar"
   '(:class "net-sf-jabref-JabRefMain")))

(defcommand emacs-daemon-start () ()
  (run-shell-command "x-terminal-emulator -T emacs-daemon-start -e emacs --daemon=default"))

(defcommand emacs-daemon-kill () ()
  (run-shell-command "pkill -9 emacsclient")
  (run-shell-command "emacsclient --server-file=default -e \"(progn (setq kill-emacs-hook 'nil) (kill-emacs))\"")
  (run-shell-command "pkill -9 emacsclient")
  (run-shell-command "pkill -9 emacs"))

(defcommand emacs-daemon-restart () ()
  (emacs-daemon-kill)
  (emacs-daemon-start))

(defcommand emacs () ()
  (run-or-raise "emacsclient --server-file=default -c -F '((name . \"emacs\"))' "
		'(:instance "emacs")))

(defcommand org-agenda () ()
  (run-or-raise "emacsclient --server-file=default -c -F '((name . \"org-agenda\"))' --eval '(progn (org-agenda nil \"m\") (org-agenda nil \"l\") (delete-other-windows))'"
		'(:instance "org-agenda")))

(defcommand gnus () ()
  (run-or-raise "emacsclient --server-file=default -c -F '((name . \"gnus\"))' --eval '(gnus)'"
		'(:instance "gnus")))

(defcommand org-contacts (search)
  ((:string "Search Contacts: "))
  "docstring"
  (check-type search string)
  (substitute #\+ #\Space search)
  (run-shell-command (cat "emacsclient --server-file=default -c -F '((name . \"org-contacts\"))' --eval '(progn (org-contacts \"" search "\")(delete-other-windows))'")))

(defcommand emms () ()
  (run-or-raise "emacsclient --server-file=default -c -F '((name . \"emms\"))' --eval '(eh-emms)'"
	       '(:instance "emms")))

(defcommand emms-toggle () ()
  (emms)
  (run-shell-command "emacsclient --server-file=default --eval '(if emms-player-playing-p (emms-pause) (emms-random))'"))

(defcommand emms-previous () ()
  (emms)
  (run-shell-command "emacsclient --server-file=default --eval '(emms-previous)'"))

(defcommand emms-next () ()
  (emms)
  (run-shell-command "emacsclient --server-file=default --eval '(emms-next)'"))

(defcommand edit-stumpwmrc () ()
  (run-or-raise
   (concat "emacsclient --server-file=default -c -F '((name . \"edit-stumpwmrc\"))' " stumpwmrc-file)
   '(:instance "edit-stumpwmrc")))

(defcommand org-capture () ()
  (run-or-raise "emacsclient --server-file=default -c -F '((name . \"org-capture\"))'"
		'(:instance "org-capture")))

(defun xdotool-command (x1 y1 x2 y2 other-commands)
  (if (and x1 y1 x2 y2)
      (concat "echo | xsel -b -i;"
	      "xdotool mousemove --sync" " " x1 " " y1 ";"
	      "xdotool click 1;"
	      "sleep 0.5;"
	      "xdotool mousemove_relative --sync" " " x2 " " y2 ";"
	      "sleep 0.5;"
	      "xdotool click 1;"
	      "sleep 0.5;"
	      other-commands
	      ";")
      (concat "echo "" | xsel -b -i;"
	      "xdotool key ctrl+c;"
	      other-commands
	      ";")))

(defcommand org-capture-notes-x-selection () ()
  (let ((window-class-string (if (current-window) (window-class (current-window)) ""))
	(window-instance-string (if (current-window) (window-res (current-window)) ""))
	(org-capture-command "emacsclient --server-file=default  --eval '(eh-org-capture nil \"notes-x-selection\")'"))
    (if (not (search "Emacs" window-class-string))
      (cond
	((search "CAJViewer" window-instance-string)
	 (run-shell-command (xdotool-command "110" "50" "40" "25" org-capture-command)))
	((search "wp" window-instance-string)
	 (run-shell-command (xdotool-command "110" "50" "40" "100" org-capture-command)))
	(t (run-shell-command (xdotool-command nil nil nil nil  org-capture-command))))
      (run-shell-command org-capture-command))))

(defcommand org-capture-notes () ()
  (run-shell-command "emacsclient --server-file=default  --eval '(progn (kill-new \"\") (eh-org-capture nil \"notes\"))'"))

(defcommand org-capture-todo () ()
  (run-shell-command "emacsclient --server-file=default  --eval '(eh-org-capture nil \"todo\")'"))

(defcommand org-capture-account () ()
  (run-shell-command "emacsclient --server-file=default  --eval '(eh-org-capture nil \"account\")'"))

(defcommand org-capture-journal () ()
  (run-shell-command "emacsclient --server-file=default  --eval '(eh-org-capture nil \"journal\")'"))

(defcommand org-capture-schedule () ()
  (run-shell-command "emacsclient --server-file=default  --eval '(eh-org-capture nil \"schedule\")'"))

(defcommand org-capture-contacts () ()
  (run-shell-command "emacsclient --server-file=default  --eval '(eh-org-capture nil \"contacts\")'"))

(defcommand pidgin () ()
  (run-shell-command "pidgin"))

(defcommand mplayer () ()
  (run-or-raise "smplayer" '(:class "Smplayer")))

(defcommand pdfreader () ()
  (run-or-raise "acroread" '(:class "Acroread")))

(defcommand cajviewer () ()
  (run-or-raise "" '(:instance "CAJVieweru.exe")))

(defcommand top () ()
  (run-or-raise "x-terminal-emulator -t htop -e htop" '(:title "htop")))

(defcommand x-terminal-emulator () ()
  (run-or-raise "x-terminal-emulator -t default-terminal"
		'(:title "default-terminal")))

(defcommand launch-new-terminal () ()
  (run-shell-command "x-terminal-emulator"))

(defcommand power-manager () ()
  (run-shell-command "xfce4-power-manager-settings"))

(defcommand goagent () ()
  (run-or-raise "python ~/project/goagent/local/goagent-gtk.py"
		'(:title "goagent-gtk.py")))

(defcommand lock-screen () ()
  (run-shell-command "exec xscreensaver-command -lock"))

(defcommand reinit () ()
  "docstring"
  (run-commands "reload" "loadrc"))

(defcommand show-debian-menu () ()
  "show debian menu"
  (setf *app-menu* nil)
  (load-menu-file debian-menu-file :strip 1)
  (show-menu))

(defparameter *start-menu*
  '(("---------------------------------------------------")
    ("ZD"     "终端" "x-terminal-emulator")
    (""       "EMACS"  "emacs")
    (""       "org-agenda" "org-agenda")
    ("WJGL"   "文件管理" "file-manager")
    ("SW"     "上网" "firefox")
    ("chrome" "谷歌浏览器"  "chromium")
    ("DZYJ"   "邮件" "gnus")
    ("pidgin" "聊天" "pidgin")
    ("YY"     "音乐" "emms")
    ("DYSP"   "视频" "mplayer")
    ("PDF"    "PDF查看器" "pdfreader")
    (""       "Evince"  "/usr/bin/evince")
    ("---------------------------------------------------")
    ("WNZZ"   "韦诺之战"  "/usr/games/wesnoth-1.10-nolog")
    ("----------------------------------------------------")
    (""       "GNOME大眼睛"  "/usr/bin/eog")
    (""       "图片" "/usr/bin/shotwell")
    ("Dia"    "流程图" "/usr/bin/dia-normal")
    ("PS"     "The GIMP" "/usr/bin/gimp")
    ("---------------------------------------------------")
    ("WPS"    "金山WPS"  "/opt/kingsoft/wps-office/office6/wps")
    ("Word"   "LibreOffice Writer"  "/usr/bin/libreoffice --writer")
    ("Excel"  "LibreOffice Calc"  "/usr/bin/libreoffice --calc")
    ("PPT"    "LibreOffice Impress"  "/usr/bin/libreoffice --impress")
    ("TNFB"   "头脑风暴"  "/usr/bin/freemind")
    ("---------------------------------------------------")
    (""       "记事本"  "/usr/bin/leafpad")
    (""       "Nano"  "x-terminal-emulator  -T \"Nano\" -e sh -c \"/bin/nano\"")
    (""       "获取WN_CLASS" "show-window-properties")
    (""       "WinXP"       "VirtualBox")
    ("BJPZ"   "编辑配置"  "edit-stumpwmrc")
    ("---------------------------------------------------")
    ("XTJK"   "系统监控" "top")
    ("ZX"     "注销"  "quit")
    ("SP"     "锁屏"  "lock-screen")
    ("GQ"     "挂起"  "suspend-computer")
    ("XM"     "休眠"  "hibernate-computer")
    ("CQ"     "重启 "  "restart-computer")
    ("GJ"     "关机"  "shutdown-commputer")
    ("---------------------------------------------------")))

(defcommand show-start-menu () ()
  "show-start-menu"
  (labels ((pick (options)
                 (let ((selection (stumpwm::select-from-menu
                                   (current-screen) options "")))
                   (cond
                    ((null selection)
                     (throw 'stumpwm::error "Abort."))
                    ((stringp (second selection))
                     (second selection))
                    (t
                     (pick (cdr selection)))))))
    (let ((choice (pick
		   (mapcar #'(lambda (x)
			       (list
				(if (car (cdr x))
				    (format nil "~10A | ~30A" (nth 0 x) (concat (nth 1 x) "(" (nth 2 x) ")"))
				    (make-string 60 :initial-element #\-))
				(nth 2 x)))
			   *start-menu*))))
      ;; If a function can be found, which name is "choice", run this function,
      ;; otherwise regard "choice" as shell command.
      (if (find choice (all-commands) :test #'equal)
	  (run-commands choice)
	  (run-shell-command choice)))))

(defun shift-windows-forward (frames win)
  (when frames
          (let ((frame (car frames)))
                 (shift-windows-forward (cdr frames)
                                        (frame-window frame))
                 (when win
                         (pull-window win frame)))))

(defcommand rotate-windows () ()
  "swap 2 windows"
  (let* ((frames (group-frames (current-group)))
           (win (frame-window (car (last frames)))))
          (shift-windows-forward frames win)))

(defcommand toggle-split () ()
  "toggle between vertical split and horizontal split"
  (let* ((group (current-group))
         (cur-frame (tile-group-current-frame group))
         (frames (group-frames group)))
    (if (eq (length frames) 2)
        (progn (if (or (neighbour :left cur-frame frames)
                       (neighbour :right cur-frame frames))
                   (progn
                     (only)
                     (vsplit))
                 (progn
                   (only)
                   (hsplit))))
      (message "Works only with 2 frames"))))

;; keybindings for split frame
(define-key *root-map* (kbd "C-1") "hsplit")
(define-key *root-map* (kbd "C-2") "vsplit")
(define-key *root-map* (kbd "C-0") "only")

;; push the window in the adjacent frame
(define-key *root-map* (kbd "C-Up") "move-window up")
(define-key *root-map* (kbd "C-Left") "move-window left")
(define-key *root-map* (kbd "C-Down") "move-window down")
(define-key *root-map* (kbd "C-Right") "move-window right")
(define-key *root-map* (kbd "Delete") "repack-window-numbers")
(define-key *root-map* (kbd "I") "show-window-properties")
(define-key *root-map* (kbd "~") "rotate-windows")
(define-key *root-map* (kbd "|") "toggle-split")

;; keybinding for Fn + F1...F12
(define-key *top-map* (kbd "XF86Mail")   "gnus")
(define-key *top-map* (kbd "XF86MyComputer") "file-manager")
(define-key *top-map* (kbd "XF86AudioNext")  "emms-next")
(define-key *top-map* (kbd "XF86AudioPrev")  "emms-previous")
(define-key *top-map* (kbd "XF86AudioPlay")  "emms-toggle")

;; Menu
(define-key *root-map* (kbd "m") "show-debian-menu")
(define-key *root-map* (kbd ".") "show-start-menu")

;; Applications launched frequentily
(define-key *root-map* (kbd "v") "file-manager")
(define-key *root-map* (kbd "c") "pidgin")
(define-key *root-map* (kbd "RET") "x-terminal-emulator")
(define-key *root-map* (kbd "z") "org-contacts")
(define-key *root-map* (kbd "a") "org-agenda")
(define-key *root-map* (kbd "Delete") "exec gksudo halt")
(define-key *root-map* (kbd "L") "lock-screen")
(define-key *root-map* (kbd "&") "exec x-terminal-emulator -e aptitude")
(define-key *root-map* (kbd "x") "exec dmenu_run -i -b -fn '10x20' -p \"shell cmd:\"")

(defvar *applications-map*
  (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "g") "goagent")
    (stumpwm:define-key m (stumpwm:kbd "f") "firefox")
    (stumpwm:define-key m (stumpwm:kbd "t") "launch-new-terminal")
    (stumpwm:define-key m (stumpwm:kbd "j") "jabref")
    (stumpwm:define-key m (stumpwm:kbd "c") "cajviewer")
    (stumpwm:define-key m (stumpwm:kbd "p") "pdfreader")
    (stumpwm:define-key m (stumpwm:kbd "w") "winxp")
    m ; NOTE: this is important
    ))

(defvar *emacs-map*
  (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "e") "emacs")
    (stumpwm:define-key m (stumpwm:kbd "s") "edit-stumpwmrc")
    (stumpwm:define-key m (stumpwm:kbd "g") "gnus")
    (stumpwm:define-key m (stumpwm:kbd "a") "org-agenda")
    (stumpwm:define-key m (stumpwm:kbd "m") "emms")
    (stumpwm:define-key m (stumpwm:kbd "c") "org-capture")
    (stumpwm:define-key m (stumpwm:kbd "R") "emacs-daemon-restart")
    (stumpwm:define-key m (stumpwm:kbd "K") "emacs-daemon-kill")
    m ; NOTE: this is important
    ))

(defvar *org-capture-map*
  (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "d") "org-capture-notes-x-selection")
    (stumpwm:define-key m (stumpwm:kbd "e") "org-capture-notes")
    (stumpwm:define-key m (stumpwm:kbd "c") "org-capture-contacts")
    (stumpwm:define-key m (stumpwm:kbd "a") "org-capture-account")
    (stumpwm:define-key m (stumpwm:kbd "j") "org-capture-journal")
    (stumpwm:define-key m (stumpwm:kbd "t") "org-capture-todo")
    (stumpwm:define-key m (stumpwm:kbd "s") "org-capture-schedule")
    m ; NOTE: this is important
    ))

(defvar *my-group-map*
  (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "C-e") "gmove EMACS")
    (stumpwm:define-key m (stumpwm:kbd "C-c") "gmove Char")
    (stumpwm:define-key m (stumpwm:kbd "C-o") "gmove Others")
    (stumpwm:define-key m (stumpwm:kbd "C-f") "gmove Float")
    (stumpwm:define-key m (stumpwm:kbd "C-g") "gmove Default")
    (stumpwm:define-key m (stumpwm:kbd "C-d") "gmove Default")
    (stumpwm:define-key m (stumpwm:kbd "e") "gselect EMACS")
    (stumpwm:define-key m (stumpwm:kbd "c") "gselect Char")
    (stumpwm:define-key m (stumpwm:kbd "o") "gselect Others")
    (stumpwm:define-key m (stumpwm:kbd "f") "gselect Float")
    (stumpwm:define-key m (stumpwm:kbd "g") "gselect Default")
    (stumpwm:define-key m (stumpwm:kbd "d") "gselect Default")
    m ; NOTE: this is important
    ))

(setf *help-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "m") "man")
        (define-key m (kbd "i") "info")
        (define-key m (kbd "v") "describe-variable")
        (define-key m (kbd "f") "describe-function")
        (define-key m (kbd "k") "describe-key")
        (define-key m (kbd "w") "where-is")
        m))

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "f") '*applications-map*)
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "e") '*emacs-map*)
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "d") '*org-capture-map*)
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "G") '*groups-map*)
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "g") '*my-group-map*)

;; Find a font of your choice in `xfontsel' and put it here.
(set-font "*-unifont-medium-*-normal-*-16-*-*-*-*-*-*-*")

;; how to format the window list
(setf *window-format* "^B%m%n:^b %40t  ")

;; width in pixels given to the borders of windows with maxsize or ratio hints
(setf *maxsize-border-width* 1)

;; width in pixels given to the borders of transient or pop-up windows
(setf *transient-border-width* 1)

;; width in pixels given to the borders of regular windows
(setf *normal-border-width* 1)

;; set the border color for focused windows
(set-focus-color "orange")  ; `white' by default
(set-unfocus-color "palegreen3")

;; input focus is transferred to the window you click on
(setf *mouse-focus-policy* :click)

;; Set the message box pad
(setf *message-window-padding* 50)

;;Set the message and input box to the bottom right. This way it overlaps with mode-line.
(setf *message-window-gravity* :bottom-right)
(setf *input-window-gravity* :bottom-right)

;; make frames 1-indexed
(setf *frame-number-map* "1234567890")

;; modeline foreground color
(setf *mode-line-foreground-color* "palegreen3")

;; modeline border color
(setf *mode-line-border-color* "palegreen3")

(defconstant *day-names*
  '("一" "二" "三" "四" "五" "六" "日"))

(defun current-date ()
  "Returns the date formatted as `2009-11-16 一 11:34:03'."
  (multiple-value-bind
      (second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil "~d-~2,'0d-~2,'0d ~a ^B~2,'0d:~2,'0d:~2,'0d^b"
            year month date (nth day-of-week *day-names*)
            hour minute second)))

(setf *group-format* ":%t:")
(setf *screen-mode-line-format*
      (list
       ;; date
       "^6*" '(:eval (current-date)) ; defined above
       " | %D | %c(%f,%t) | %M | %l"
       '(:eval (run-shell-command "echo" t))
       "^2*" "[^B%n^b] %W"
       ))

;; how many seconds elapse between each update of the modeline
(setf *mode-line-timeout* 1) ; must be set *before* turning on the modeline

;; number of padding pixels between the modeline text and the top/bottom of
;; the modeline
(setf *mode-line-pad-y* 0)

;; modeline background color
;; (setf *mode-line-background-color* "black")

;; turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))
    ; A head is a physical monitor. A screen is a section of video memory
    ; that heads are mapped on to. When using xinerama you generally have
    ; 1 screen and many heads. When not using xinerama each screen is a
    ; physical monitor so you have many screens with only one head on them.

;; turn on debugging (look at `.xsession-errors')
;; get rid of debug by setting level to 0
(setf stumpwm::*debug-level* 10)

;; display the key sequence in progress
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (eq *top-map* *resize-map*)
    (let ((*message-window-gravity* :bottom-right))
      (message "Key sequence: ~a" (print-key-seq (reverse key-seq))))
    (when (stringp cmd)
      ;; give 'em time to read it
      (sleep 0.5))))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))

(replace-hook *key-press-hook* 'key-press-hook)

(run-commands "stumptray")
(run-shell-command "xset b off")
(run-shell-command "xfce4-power-manager")
(run-shell-command "xscreensaver -no-splash")
(run-shell-command "nm-applet")
(run-shell-command "volti")
(run-shell-command "xmodmap -e 'keycode 135 = Super_R'")
(run-commands "pidgin")
(run-commands "emacs-daemon-restart")

;; Local Variables:
;; coding: utf-8
;; mode: lisp
;; End:

;;; stumpwmrc ends here
